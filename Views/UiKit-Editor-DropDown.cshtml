@using Lombiq.UIKit.Models
@using Microsoft.AspNetCore.Mvc.Localization
@using static Lombiq.UIKit.Constants.Classes 

@inject IHtmlGenerator HtmlGenerator

@{
    const string DefaultInputClass = DefaultDropDownBlockName + InputElement;
    const string DefaultLabelClass = DefaultDropDownBlockName + LabelElement;
    const string DefaultButtonClass = DefaultDropDownBlockName + ButtonElement;
    const string DefaultButtonContainerClass = DefaultDropDownBlockName + ButtonContainerElement;
    const string DefaultItemContainerClass = DefaultDropDownBlockName + ItemContainerElement;
    const string DefaultItemClass = DefaultDropDownBlockName + ItemElement;

    var customBlockClasses = Model.BlockClassName;

    var inputAttributes = new Dictionary<string, object>
    {
        ["type"] = "hidden",
        ["class"] = $"{DefaultInputClass} ",
    };

    var labelAttributes = new Dictionary<string, object>
    {
        ["class"] = $"{DefaultLabelClass} "
    };

    var forModel = Model.For as ModelExpression;
    var isRequired = forModel.Metadata.RequiredAttrExists();
    if (isRequired)
    {
        inputAttributes["required"] = "";
        inputAttributes["class"] = inputAttributes["class"] + $"{DefaultInputClass}{RequiredModifier} ";
        labelAttributes["class"] = labelAttributes["class"] + $"{DefaultLabelClass}{RequiredModifier} ";
    }

    if (Model.Disabled == true)
    {
        inputAttributes["disabled"] = "";
    }

    var label = Model.Label != null
        ? HtmlGenerator.GenerateLabel(
            Model.ViewContext,
            forModel.ModelExplorer,
            forModel.Name,
            (Model.Label as LocalizedHtmlString)?.Value,
            labelAttributes)
        : null;

    var input = HtmlGenerator.GenerateTextBox(
        Model.ViewContext,
        forModel.ModelExplorer,
        forModel.Name,
        forModel.Model,
        string.Empty,
        inputAttributes);

    var dropDownData = Model.DropDownData as List<DropDownItem>;

    var defaultData = dropDownData.FirstOrDefault(data => data.DataState.Equals(forModel.Model));

    var disabled = (Model.Disabled != null && Model.Disabled) ? "disabled" : string.Empty;
}

<style asp-src="~/Lombiq.UIKit/css/dropDown.min.css" debug-src="~/Lombiq.UIKit/css/dropDown.css"></style>

<div id="@Model.DropDownContainerId" class="@customBlockClasses @DefaultDropDownBlockName">
    @label
    @input
    <nav>
        <div asp-validation-class-for="@forModel">
            <div id="@Model.ButtonContainerId" class="@DefaultButtonContainerClass">
                <button id="@Model.ButtonId"
                        title="@forModel.Model" @(disabled)
                        class="btn btn-sm @defaultData.DataClass dropdown-toggle @DefaultButtonClass"
                        type="button"
                        data-toggle="dropdown">@defaultData.Text</button>
                <div class="dropdown-menu @DefaultItemContainerClass">
                    @foreach (var dropDownItem in dropDownData)
                    {
                        <a href="javascript:void(0)"
                            data-state="@dropDownItem.DataState"
                            data-state-text="@dropDownItem.Text"
                            data-class="@dropDownItem.DataClass"
                            class="dropdown-item @DefaultItemClass">@dropDownItem.Text</a>
                    }
                </div>
            </div>
        </div>
    </nav>
</div>

<script asp-src="~/Lombiq.UIKit/js/dropDownEditor.js" at="Foot" depends-on="jQuery"></script>
<script at="Foot">
    (function ($) {
        $(function () {
            @if ((bool?)Model.HideSelectedFromDropDownList == true)
            {
                @:removeSelectedFromDropDown(@Json.Serialize(Model.ButtonId));
            }

            dropdownOnClick(
                @Json.Serialize(Model.ButtonContainerId),
                @Json.Serialize(Model.ButtonId),
                @Json.Serialize((Html.IdFor(m => forModel.Model))),
                @Json.Serialize(Model.HideSelectedFromDropDownList));
        });
    })(jQuery);
</script>
