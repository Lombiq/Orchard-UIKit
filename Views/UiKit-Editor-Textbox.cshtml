@inject IHtmlGenerator HtmlGenerator

@{
    const string DefaultBlockName = "textBoxEditor";
    var blockClassName = Model.BlockClassName ?? DefaultBlockName;
    var placeholderClass = $"{DefaultBlockName}__placeholder";
    var placeholderLabelClass = $"{DefaultBlockName}__placeholderLabel";


    var forModel = Model.For as ModelExpression;

    var labelAttributes = new Dictionary<string, object>
    {
        ["class"] = $"{DefaultBlockName}__label {blockClassName}__label"
    };

    var inputAttributes = new Dictionary<string, object>
    {
        ["class"] = $"{DefaultBlockName}__input {blockClassName}__input"
    };

    var isRequired = forModel.Metadata.RequiredAttrExists();
    if (isRequired)
    {
        inputAttributes["required"] = string.Empty;
        inputAttributes["class"] = inputAttributes["class"]
            + $" {DefaultBlockName}__label_required {blockClassName}__label_required";
        labelAttributes["class"] = labelAttributes["class"]
            + $" {DefaultBlockName}__label_required {blockClassName}__label_required";
    }

    if (Model.Disabled == true)
    {
        inputAttributes["disabled"] = string.Empty;
    }

    var labelPositionModifier = Model.LabelPosition switch
    {
        LabelPosition.Border => "__label_border",
        LabelPosition.Top => "__label_top",
        LabelPosition.None => "__label_none",
        _ => "__label_top",
    };

    labelAttributes["class"] = labelAttributes["class"] + $" {DefaultBlockName}{labelPositionModifier}" +
            $" {blockClassName}{labelPositionModifier}";


    if (Model.LabelPosition == LabelPosition.None)
    {
        labelAttributes["class"] = labelAttributes["class"] + $" {placeholderLabelClass}";
    }

    if (Model.LabelPosition == LabelPosition.Border)
    {
        inputAttributes["class"] = inputAttributes["class"] + $" textBoxEditor__input_borderLabel";
    }

    var hasAsteriksInPlaceholder = Model.LabelPosition == LabelPosition.None && isRequired;


    var placeholder = Model.Placeholder as string;
    if (!string.IsNullOrEmpty(placeholder) && !hasAsteriksInPlaceholder)
    {
        inputAttributes["placeholder"] = placeholder;
    }

    var blockId = string.IsNullOrEmpty(Model.BlockId) ? string.Empty : $"id={Model.BlockId}";

    var noLabelNotRequired = Model.LabelPosition == LabelPosition.None && !isRequired;

    var label = noLabelNotRequired
        ? null
        : HtmlGenerator.GenerateLabel(
            Model.ViewContext,
            forModel.ModelExplorer,
            forModel.Name,
            hasAsteriksInPlaceholder
                ? placeholder
                : Model.Label,
            labelAttributes);

    var input = HtmlGenerator.GenerateTextBox(
        Model.ViewContext,
        forModel.ModelExplorer,
        forModel.Name,
        forModel.Model,
        string.Empty,
        inputAttributes);

}
<style asp-src="~/Lombiq.UIKit/css/textBox.min.css" debug-src="~/Lombiq.UIKit/css/textBox.css"></style>
<script asp-src="~/Lombiq.UIKit/js/textBoxEditor.js" at="Foot" depends-on="jQuery"></script>

<div @blockId class="form-group @(DefaultBlockName) @blockClassName @Model.Class">

    @if (hasAsteriksInPlaceholder)
    {
        <div class="@(DefaultBlockName)__placeholder @(blockClassName)__placeholder">
            @label
            <span class="@(DefaultBlockName)__asterisk @(blockClassName)__asterisk">*</span>
        </div>
    }
    else
    {
        @label
    }

    @input

    @if (!string.IsNullOrEmpty(Model.Hint))
    {
        <div class="hint @(blockClassName)__hint">@Model.Hint</div>
    }
</div>
