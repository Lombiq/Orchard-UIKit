@using Lombiq.UIKit.Models
@using Microsoft.AspNetCore.Mvc.Localization
@using static Lombiq.UIKit.Constants.Classes

@inject IHtmlGenerator HtmlGenerator

@{
    var customBlockClasses = Model.BlockClassName;

    var inputAttributes = new Dictionary<string, object>
    {
        ["type"] = "hidden",
        ["class"] = $"{DropdownInputClass} ",
    };

    var labelAttributes = new Dictionary<string, object>
    {
        ["class"] = $"{DropdownLabelClass} "
    };

    var forModel = Model.For as ModelExpression;
    var isRequired = forModel.Metadata.RequiredAttributeExists();
    if (isRequired)
    {
        inputAttributes["required"] = string.Empty;
        inputAttributes["class"] = inputAttributes["class"] + $"{DropdownInputRequiredClass} ";
        labelAttributes["class"] = labelAttributes["class"] + $"{DropdownLabelRequiredClass} ";
    }

    if (Model.Disabled == true)
    {
        inputAttributes["disabled"] = string.Empty;
    }

    var label = Model.Label != null
        ? HtmlGenerator.GenerateLabel(
            Model.ViewContext,
            forModel.ModelExplorer,
            forModel.Name,
            (Model.Label as LocalizedHtmlString)?.Value,
            labelAttributes)
        : null;

    var input = HtmlGenerator.GenerateTextBox(
        Model.ViewContext,
        forModel.ModelExplorer,
        forModel.Name,
        forModel.Model,
        string.Empty,
        inputAttributes);

    var dropdownData = Model.DropdownData as List<DropdownItem>;

    var defaultData = dropdownData.FirstOrDefault(data => data.DataState.Equals(forModel.Model));

    var disabled = (Model.Disabled != null && Model.Disabled) ? "disabled" : string.Empty;
}

<style asp-name="@ResourceNames.LombiqDropdownStyle"></style>

<div id="@Model.DropdownContainerId" class="@customBlockClasses @DropdownBlockName">
    @label
    @input
    <div asp-validation-class-for="@forModel">
        <div id="@Model.ButtonContainerId" class="@DropdownButtonContainerClass dropdown">
            <button class="btn btn-sm dropdown-toggle @DropdownButtonClass @defaultData.DataClass"
                    title="@forModel.Model"
                    @disabled
                    type="button"
                    id="@Model.ButtonId"
                    data-bs-toggle="dropdown">
                @defaultData.Text
            </button>
            <div class="dropdown-menu dropdown-menu-right @DropdownItemContainerClass">
                @foreach (var dropdownItem in dropdownData)
                {
                    <a href="javascript:void(0)"
                       data-state="@dropdownItem.DataState"
                       data-state-text="@dropdownItem.Text"
                       data-class="@dropdownItem.DataClass"
                       class="dropdown-item @DropdownItemClass">
                        @dropdownItem.Text
                    </a>
                }
            </div>
        </div>
    </div>
</div>

<script asp-name="@ResourceNames.LombiqDropdownScript" at="Foot" depends-on="jQuery"></script>
<script at="Foot">
    jQuery(($) => {
        @if ((bool?)Model.HideSelectedFromDropdownList == true)
        {
            @:removeSelectedFromDropDown(@Json.Serialize(Model.ButtonId));
        }

        dropdownOnClick(
            @Json.Serialize(Model.ButtonContainerId),
            @Json.Serialize(Model.ButtonId),
            @Json.Serialize((Html.IdFor(m => forModel.Model))),
            @Json.Serialize(Model.HideSelectedFromDropdownList));
    });
</script>
